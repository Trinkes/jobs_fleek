"""add logs table

Revision ID: affa7bf0fdad
Revises: 606fee1aa40e
Create Date: 2025-08-07 01:29:16.681117

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "affa7bf0fdad"
down_revision = "606fee1aa40e"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("tag", sa.String(), nullable=False),
        sa.Column(
            "level",
            sa.Enum("ERROR", "WARNING", "INFO", "DEBUG", name="loglevel"),
            nullable=False,
        ),
        sa.Column("message", sa.String(), nullable=True),
        sa.Column("extra", sa.JSON(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_logs_created_at"), "logs", ["created_at"], unique=False)
    op.create_index(op.f("ix_logs_id"), "logs", ["id"], unique=False)
    op.create_index(op.f("ix_logs_tag"), "logs", ["tag"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_logs_tag"), table_name="logs")
    op.drop_index(op.f("ix_logs_id"), table_name="logs")
    op.drop_index(op.f("ix_logs_created_at"), table_name="logs")
    op.drop_table("logs")
    op.execute("drop type loglevel;")
    # ### end Alembic commands ###


def add_non_nullable_column(
    table_name: str,
    column: sa.Column,
    default_value: str | None = None,
    default_value_expression: str | None = None,
):
    op.add_column(table_name, column)
    if default_value is not None:
        op.execute(f"UPDATE {table_name} SET {column.name} = '{default_value}'")
    if default_value_expression is not None:
        op.execute(
            f"UPDATE {table_name} SET {column.name} = ({default_value_expression})"
        )
    op.alter_column(table_name, column.name, nullable=False)
