"""add medias table

Revision ID: 0426055d10f3
Revises:
Create Date: 2025-08-05 01:28:55.224309

"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "0426055d10f3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "medias",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("job_id", sa.UUID(), nullable=False),
        sa.Column("prompt", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "IN_QUEUE",
                "PROCESSING",
                "COMPLETED",
                name="mediastatus",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("media_uri", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("job_id", name="job_id_unique"),
    )
    op.create_index(
        op.f("ix_medias_created_at"), "medias", ["created_at"], unique=False
    )
    op.create_index(op.f("ix_medias_id"), "medias", ["id"], unique=False)
    op.create_index(op.f("ix_medias_job_id"), "medias", ["job_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_medias_job_id"), table_name="medias")
    op.drop_index(op.f("ix_medias_id"), table_name="medias")
    op.drop_index(op.f("ix_medias_created_at"), table_name="medias")
    op.drop_table("medias")
    # ### end Alembic commands ###


def add_non_nullable_column(
    table_name: str,
    column: sa.Column,
    default_value: str | None = None,
    default_value_expression: str | None = None,
):
    op.add_column(table_name, column)
    if default_value is not None:
        op.execute(f"UPDATE {table_name} SET {column.name} = '{default_value}'")
    if default_value_expression is not None:
        op.execute(
            f"UPDATE {table_name} SET {column.name} = ({default_value_expression})"
        )
    op.alter_column(table_name, column.name, nullable=False)
